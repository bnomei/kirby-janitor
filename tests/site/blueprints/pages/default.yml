title: Default Page
preset: page
fields:

  text:
    type: text

  kirby_clearcachepages:
    type: janitor
    command: 'clear:cache --name pages'
    label: Kirby Clear Pages Cache
    icon: trash

  test_whistle:
    type: janitor
    command: whistle
    label: Whistle
    icon: audio

  test_ping:
    type: janitor
    command: ping
    label: Ping
    progress: ....
    success: Pong
    error: BAMM

  janitor_flushpages:
    type: janitor
    command: 'janitor:flush --name pages'
    label: Janitor Flush Pages Cache
    success: Cache was cleared!
    icon: trash

  test_uuid:
    type: janitor
    command: 'uuid'
    label: Echo the uuid

  test_unsaved:
    type: janitor
    command: whistle
    unsaved: false
    label: Disable when Page has changes
    icon: lock

  test_autosave:
    type: janitor
    command: whistle
    autosave: true
    label: 'Safe on Click [Text = {{ page.text }}]'

  test_reload:
    type: janitor
    command: reload
    label: Reload Page Example
    icon: refresh
    # help: returns `reload => true` to janitor

  janitor_open:
    type: janitor
    command: 'janitor:open --data {{ user.panel.url }}'
    intab: true
    label: Open current user URL in new tab
    icon: open
    # help: returns `href => $data` to janitor

  janitor_pipedatatohref:
    type: janitor
    command: 'janitor:pipe --data {{ user.panel.url }} --to open'
    intab: true
    label: Open current user URL in new tab (via pipe)
    icon: open
    # help: returns `$to => $data` to janitor

  janitor_clipboardfetch:
    type: janitor
    command: 'janitor:clipboard --data {{ user.email }}'
    label: Fetch Clipboard
    icon: copy

  janitor_clipboarddata:
    type: janitor
    command: 'janitor:clipboard --data {{ page.title }}'
    label: 'Copy "{{ page.title }}" to Clipboard'
    progress: Copied!
    icon: copy

  janitor_download:
    type: janitor
    command: 'janitor:download --data {{ site.index.files.first.url }}'
    label: Download File Example
    icon: download

  janitor_backupzip:
    type: janitor
    command: 'janitor:backupzip'
    cooldown: 5000
    label: Generate Backup ZIP
    icon: archive

  janitor_down:
    type: janitor
    command: 'janitor:maintenance --down --user {{ user.uuid }}'
    cooldown: 5000
    label: 'Maintenance: DOWN'

  janitor_up:
    type: janitor
    command: 'janitor:maintenance --up --user {{ user.uuid }}'
    cooldown: 5000
    label: 'Maintenance: UP'

  janitor_maintenance:
    type: janitor
    command: 'janitor:maintenance --user {{ user.uuid }}'
    cooldown: 5000
    label: 'Maintenance: {{ site.isUnderMaintenance.ecco("DOWN","UP") }}'
    icon: '{{ site.isUnderMaintenance.ecco("cancel","circle") }}'

#  NOTE: This is old/v2 syntax
#  janitor_job_v2:
#    type: janitor
#    job: some.key.to.task
#    data: "some data"
#    label: 'Run Janitor v2 job'

  janitor_job_v3:
    type: janitor
    command: 'janitor:job --key some.key.to.task --data "some data"'
    # terminal: 'janitor:job --key some.key.to.task --data "some data" --user user://kXLzsVwR'
    label: 'Run Janitor v2 job'

  janitor_cleancontent:
    type: janitor
    command: 'janitor:cleancontent'
    label: 'Clean Content'

  janitor_render:
    type: janitor
    command: 'janitor:render'
    label: Render pages to create missing thumb jobs

  # NOTE: It is better to generate thumbs via CLI / SSH / CRON
  # since most servers have 30sec php timeout for web
  janitor_thumbssite:
    type: janitor
    command: 'janitor:thumbs --site'
    label: Generate thumbs from existing thumb jobs (full site)

  janitor_thumbspage:
    type: janitor
    command: 'janitor:thumbs' # NOTE: without --site
    label: Generate thumbs from existing thumb jobs (only this page)

  janitor_smart:
    label: 'Resolve Arg smart/lazy using {( instead of {{'
    type: janitor
    command: 'janitor:pipe --data {( model.text.kirbytext )} --to message'
    # pipe will show lazy/smart resolved data on button (aka the message)
    help: THIS IS NEW AUTOMATIC DEFAULT IN v3.10

  janitor_color:
    label: Janitor buttons can now be colorful
    type: janitor
    command: 'janitor:job --key random.colors'
    color: 'var(--color-blue-600)'
    backgroundColor: 'var(--color-blue-200)'

  janitor_callNoData:
    label: Call method on model
    type: janitor
    command: 'janitor:call --method whoAmI'

  janitor_callWithData:
    label: Call method on model with Data
    type: janitor
    command: 'janitor:call --method repeatAfterMe --data {{ user.id }}'

  sele:
    type: select
    options:
      - a
      - b
      - c

  janitor_savedData:
    label: 'Saved Data'
    type: janitor
    command: 'janitor:pipe --data {{ page.sele }} --to message'
    # autosave: true
